{"ast":null,"code":"// eslint-disable-next-line\n\"use strict\";\n\nconst {\n  validateEmail\n} = require(\"./../utils/validate-email.js\");\n\nconst logic = {\n  _url: process.env.REACT_APP_API_URL,\n\n  /**\n   *\n   * @param {*} field\n   * @param {*} value\n   */\n  _validateStringField(field, value) {\n    if (typeof value !== \"string\" || !value.trim().length) throw Error(`${field} is not valid`);\n  },\n\n  /**\n   *\n   * @param {*} email\n   */\n  _validateEmail(email) {\n    if (!validateEmail(email)) throw Error(`${email} is not a valid email`);\n  },\n\n  /**\n   *\n   * @param {*} userId\n   */\n  _userId(userId) {\n    if (typeof userId !== \"undefined\") {\n      sessionStorage.setItem(\"userId\", userId);\n      return;\n    }\n\n    return sessionStorage.getItem(\"userId\");\n  },\n\n  /**\n   *\n   * @param {*} firstname\n   * @param {*} lastname\n   */\n  _userName(firstname, lastname) {\n    if (typeof userId !== \"undefined\") {\n      sessionStorage.setItem(\"firstname\", firstname);\n      sessionStorage.setItem(\"lastname\", lastname);\n      return;\n    }\n\n    return sessionStorage.getItem(\"firstname\");\n  },\n\n  /**\n   *\n   * @param {*} token\n   */\n  _token(token) {\n    if (typeof token !== \"undefined\") {\n      sessionStorage.setItem(\"token\", token);\n      return;\n    }\n\n    return sessionStorage.getItem(\"token\");\n  },\n\n  /**\n   *\n   */\n  isLoggedIn() {\n    const res = !!(this._userId() && this._token());\n    return res;\n  },\n\n  /**\n   *\n   * @param {*} email\n   * @param {*} password\n   * @param {*} name\n   */\n  register(firstname, lastname, email, password) {\n    return Promise.resolve().then(() => {\n      this._validateStringField(\"firstname\", firstname);\n\n      this._validateStringField(\"lastname\", lastname);\n\n      this._validateEmail(email);\n\n      this._validateStringField(\"password\", password);\n\n      return fetch(`${this._url}api/Auth/register`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          firstname,\n          lastname,\n          email,\n          password\n        }),\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      }).then(res => {\n        if (res.status === 201) {\n          return res;\n        }\n\n        return res.json().then(({\n          message\n        }) => {\n          throw Error(message);\n        });\n      }).then(res => res.json()).then(() => true);\n    });\n  },\n\n  /**\n   * @param {*} id\n   * @param {*} firstname\n   * @param {*} lastname\n   * @param {*} email\n   * @param {*} password\n   */\n  updateUser(id, firstname, lastname, email, password) {\n    return Promise.resolve().then(() => {\n      this._validateStringField(\"firstname\", firstname);\n\n      this._validateStringField(\"lastname\", lastname);\n\n      this._validateEmail(email);\n\n      this._validateStringField(\"password\", password);\n\n      return fetch(`${this._url}api/Auth/update`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          firstname,\n          lastname,\n          email,\n          password\n        }),\n        headers: {\n          \"content-type\": \"application/json\",\n          \"Access-Control-Allow-Methods\": \"*\"\n        }\n      }).then(res => {\n        if (res.status === 200) {\n          return res;\n        }\n\n        return res.json().then(({\n          message\n        }) => {\n          throw Error(message);\n        });\n      }).then(res => res.json()).then(() => true);\n    });\n  },\n\n  /**\n   *\n   * @param {*} email\n   * @param {*} password\n   */\n  login(email, password) {\n    return Promise.resolve().then(() => {\n      this._validateEmail(email);\n\n      this._validateStringField(\"password\", password);\n\n      return fetch(`${this._url}api/Auth/login`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          email,\n          password\n        }),\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      }).then(res => {\n        if (res.status === 200) {\n          return res;\n        }\n\n        return res.json().then(({\n          message\n        }) => {\n          throw Error(message);\n        });\n      }).then(res => res.json()).then(({\n        token,\n        userId\n      }) => {\n        this._token(token);\n\n        this._userId(userId);\n\n        return true;\n      });\n    });\n  },\n\n  /**\n   *\n   */\n  logout() {\n    delete this.token;\n    delete this.userId;\n    sessionStorage.clear();\n  },\n\n  addComment(comment) {\n    return fetch(`${this._url}api/Comments/add`, {\n      method: \"POST\",\n      body: JSON.stringify(comment),\n      headers: {\n        \"content-type\": \"application/json\",\n        authorization: `Bearer ${this._token()}`\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        return res;\n      }\n\n      return res.json().then(({\n        message\n      }) => {\n        throw Error(message);\n      });\n    });\n  },\n\n  retrieveUser() {\n    return fetch(`${this._url}api/User/getbyid?id=${this._userId()}`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        return res;\n      }\n\n      return res.json().then(({\n        message\n      }) => {\n        throw Error(message);\n      });\n    }).then(res => res.json()).then(user => user);\n  }\n\n};\nmodule.exports = logic;","map":{"version":3,"sources":["/home/otokon/Code/MovieSuggestion/movie-suggestion-client/src/logic/index.js"],"names":["validateEmail","require","logic","_url","process","env","REACT_APP_API_URL","_validateStringField","field","value","trim","length","Error","_validateEmail","email","_userId","userId","sessionStorage","setItem","getItem","_userName","firstname","lastname","_token","token","isLoggedIn","res","register","password","Promise","resolve","then","fetch","method","body","JSON","stringify","headers","status","json","message","updateUser","id","login","logout","clear","addComment","comment","authorization","retrieveUser","user","module","exports"],"mappings":"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","sourcesContent":["// eslint-disable-next-line\n\"use strict\";\n\nconst { validateEmail } = require(\"./../utils/validate-email.js\");\n\nconst logic = {\n  _url: process.env.REACT_APP_API_URL,\n\n  /**\n   *\n   * @param {*} field\n   * @param {*} value\n   */\n  _validateStringField(field, value) {\n    if (typeof value !== \"string\" || !value.trim().length)\n      throw Error(`${field} is not valid`);\n  },\n\n  /**\n   *\n   * @param {*} email\n   */\n  _validateEmail(email) {\n    if (!validateEmail(email)) throw Error(`${email} is not a valid email`);\n  },\n\n  /**\n   *\n   * @param {*} userId\n   */\n  _userId(userId) {\n    if (typeof userId !== \"undefined\") {\n      sessionStorage.setItem(\"userId\", userId);\n\n      return;\n    }\n\n    return sessionStorage.getItem(\"userId\");\n  },\n  /**\n   *\n   * @param {*} firstname\n   * @param {*} lastname\n   */\n  _userName(firstname, lastname) {\n    if (typeof userId !== \"undefined\") {\n      sessionStorage.setItem(\"firstname\", firstname);\n      sessionStorage.setItem(\"lastname\", lastname);\n\n      return;\n    }\n\n    return sessionStorage.getItem(\"firstname\");\n  },\n  /**\n   *\n   * @param {*} token\n   */\n  _token(token) {\n    if (typeof token !== \"undefined\") {\n      sessionStorage.setItem(\"token\", token);\n\n      return;\n    }\n\n    return sessionStorage.getItem(\"token\");\n  },\n\n  /**\n   *\n   */\n  isLoggedIn() {\n    const res = !!(this._userId() && this._token());\n\n    return res;\n  },\n\n  /**\n   *\n   * @param {*} email\n   * @param {*} password\n   * @param {*} name\n   */\n  register(firstname, lastname, email, password) {\n    return Promise.resolve().then(() => {\n      this._validateStringField(\"firstname\", firstname);\n      this._validateStringField(\"lastname\", lastname);\n      this._validateEmail(email);\n      this._validateStringField(\"password\", password);\n\n      return fetch(`${this._url}api/Auth/register`, {\n        method: \"POST\",\n        body: JSON.stringify({ firstname, lastname, email, password }),\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n      })\n        .then((res) => {\n          if (res.status === 201) {\n            return res;\n          }\n\n          return res.json().then(({ message }) => {\n            throw Error(message);\n          });\n        })\n        .then((res) => res.json())\n        .then(() => true);\n    });\n  },\n\n  /**\n   * @param {*} id\n   * @param {*} firstname\n   * @param {*} lastname\n   * @param {*} email\n   * @param {*} password\n   */\n  updateUser(id, firstname, lastname, email, password) {\n    return Promise.resolve().then(() => {\n      this._validateStringField(\"firstname\", firstname);\n      this._validateStringField(\"lastname\", lastname);\n      this._validateEmail(email);\n      this._validateStringField(\"password\", password);\n\n      return fetch(`${this._url}api/Auth/update`, {\n        method: \"PUT\",\n        body: JSON.stringify({ id, firstname, lastname, email, password }),\n        headers: {\n          \"content-type\": \"application/json\",\n          \"Access-Control-Allow-Methods\": \"*\",\n        },\n      })\n        .then((res) => {\n          if (res.status === 200) {\n            return res;\n          }\n\n          return res.json().then(({ message }) => {\n            throw Error(message);\n          });\n        })\n        .then((res) => res.json())\n        .then(() => true);\n    });\n  },\n\n  /**\n   *\n   * @param {*} email\n   * @param {*} password\n   */\n  login(email, password) {\n    return Promise.resolve().then(() => {\n      this._validateEmail(email);\n      this._validateStringField(\"password\", password);\n\n      return fetch(`${this._url}api/Auth/login`, {\n        method: \"POST\",\n        body: JSON.stringify({ email, password }),\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n      })\n        .then((res) => {\n          if (res.status === 200) {\n            return res;\n          }\n\n          return res.json().then(({ message }) => {\n            throw Error(message);\n          });\n        })\n        .then((res) => res.json())\n        .then(({ token, userId }) => {\n          this._token(token);\n          this._userId(userId);\n\n          return true;\n        });\n    });\n  },\n\n  /**\n   *\n   */\n  logout() {\n    delete this.token;\n    delete this.userId;\n\n    sessionStorage.clear();\n  },\n  addComment(comment) {\n    return fetch(`${this._url}api/Comments/add`, {\n      method: \"POST\",\n      body: JSON.stringify(comment),\n      headers: {\n        \"content-type\": \"application/json\",\n        authorization: `Bearer ${this._token()}`,\n      },\n    }).then((res) => {\n      if (res.status === 200) {\n        return res;\n      }\n\n      return res.json().then(({ message }) => {\n        throw Error(message);\n      });\n    });\n  },\n  retrieveUser() {\n    return fetch(`${this._url}api/User/getbyid?id=${this._userId()}`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (res.status === 200) {\n          return res;\n        }\n\n        return res.json().then(({ message }) => {\n          throw Error(message);\n        });\n      })\n      .then((res) => res.json())\n      .then((user) => user);\n  },\n};\n\nmodule.exports = logic;\n"]},"metadata":{},"sourceType":"module"}